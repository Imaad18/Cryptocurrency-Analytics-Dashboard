import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from crypto_utils import get_top_cryptos, get_crypto_data, get_data_with_progress, display_metric, create_demo_data

def show_overview_page():
    st.markdown("<h2 class='subheader'>Cryptocurrency Market Overview</h2>", unsafe_allow_html=True)
    
    # Show loading animation while fetching data
    with st.spinner("Fetching market data..."):
        # Load top cryptocurrencies data
        top_cryptos = get_data_with_progress(get_top_cryptos, limit=25)
    
    if not top_cryptos.empty:
        # Display market stats
        st.markdown("<div style='display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;'>", unsafe_allow_html=True)
        
        # Total Market Cap
        market_cap_sum = int(top_cryptos['market_cap'].sum() / 1e9)
        st.markdown(display_metric("Total Market Cap", f"{market_cap_sum:,}B", prefix="$"), unsafe_allow_html=True)
        
        # 24h Volume
        volume_sum = int(top_cryptos['total_volume'].sum() / 1e9)
        st.markdown(display_metric("24h Volume", f"{volume_sum:,}B", prefix="$"), unsafe_allow_html=True)
        
        # Bitcoin Dominance
        btc_data = top_cryptos[top_cryptos['id'] == 'bitcoin']
        if not btc_data.empty:
            bitcoin_dominance = (btc_data['market_cap'].values[0] / top_cryptos['market_cap'].sum()) * 100
            st.markdown(display_metric("Bitcoin Dominance", f"{bitcoin_dominance:.2f}", suffix="%"), unsafe_allow_html=True)
        else:
            st.markdown(display_metric("Bitcoin Dominance", "N/A", suffix="%"), unsafe_allow_html=True)
        
        # Avg 24h Change
        avg_change = top_cryptos['price_change_percentage_24h'].mean()
        delta = f"{avg_change:.2f}%"
        st.markdown(display_metric("Avg 24h Change", f"{avg_change:.2f}", delta=delta, suffix="%"), unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Market Trends Visualization
        st.markdown("<h3 class='subheader'>Market Trends</h3>", unsafe_allow_html=True)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Market trend chart showing price movement for top 5 cryptos
            st.markdown("<h4>Top 5 Cryptocurrencies Price Trend (7d)</h4>", unsafe_allow_html=True)
            
            # Get price data for top 5 cryptos
            trend_fig = go.Figure()
            
            has_data = False
            for i, crypto in enumerate(top_cryptos.head(5)['id']):
                df = get_crypto_data(crypto, days=7)
                if not df.empty:
                    has_data = True
                    trend_fig.add_trace(go.Scatter(
                        x=df['date'], 
                        y=df['price'],
                        mode='lines',
                        name=top_cryptos.iloc[i]['name']
                    ))
            
            if has_data:
                trend_fig.update_layout(
                    height=400,
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                    margin=dict(l=20, r=20, t=40, b=20),
                    hovermode="x unified"
                )
                st.plotly_chart(trend_fig, use_container_width=True)
            else:
                st.warning("Unable to fetch price trends. Please try again later.")
        
        with col2:
            # Market sentiment gauge based on 24h price changes
            st.markdown("<h4>Market Sentiment</h4>", unsafe_allow_html=True)
            
            positive_cryptos = len(top_cryptos[top_cryptos['price_change_percentage_24h'] > 0])
            total_cryptos = len(top_cryptos)
            sentiment_score = (positive_cryptos / total_cryptos) * 100
            
            # Create a gauge chart for sentiment
            sentiment_labels = {
                (0, 20): "Very Bearish",
                (20, 40): "Bearish",
                (40, 60): "Neutral",
                (60, 80): "Bullish",
                (80, 100): "Very Bullish"
            }
            
            # Determine current sentiment
            current_sentiment = None
            for (lower, upper), label in sentiment_labels.items():
                if lower <= sentiment_score <= upper:
                    current_sentiment = label
                    break
            
            # Create gauge chart
            gauge_fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=sentiment_score,
                domain={'x': [0, 1], 'y': [0, 1]},
                gauge={
                    'axis': {'range': [0, 100]},
                    'bar': {'color': "rgba(50, 150, 255, 0.8)"},
                    'steps': [
                        {'range': [0, 20], 'color': "#EF5350"},
                        {'range': [20, 40], 'color': "#FFA726"},
                        {'range': [40, 60], 'color': "#FFEE58"},
                        {'range': [60, 80], 'color': "#66BB6A"},
                        {'range': [80, 100], 'color': "#26A69A"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': sentiment_score
                    }
                },
                title={'text': f"Current: {current_sentiment}"}
            ))
            
            gauge_fig.update_layout(
                height=300,
                margin=dict(l=20, r=20, t=70, b=20),
            )
            
            st.plotly_chart(gauge_fig, use_container_width=True)
        
        # Display top cryptocurrencies table
        st.markdown("<h3 class='subheader'>Top Cryptocurrencies by Market Cap</h3>", unsafe_allow_html=True)
        
        # Format the table
        formatted_df = top_cryptos[['name', 'symbol', 'current_price', 'market_cap', 
                                 'price_change_percentage_24h', 'total_volume']].copy()
        
        formatted_df.columns = ['Name', 'Symbol', 'Price (USD)', 'Market Cap (USD)', 
                            '24h Change (%)', '24h Volume (USD)']
        
        # Format the values
        formatted_df['Symbol'] = formatted_df['Symbol'].str.upper()
        formatted_df['Price (USD)'] = formatted_df['Price (USD)'].apply(lambda x: f"${x:,.2f}")
        formatted_df['Market Cap (USD)'] = formatted_df['Market Cap (USD)'].apply(lambda x: f"${x:,.0f}")
        
        # Store the raw values for styling but display the formatted values
        change_vals = top_cryptos['price_change_percentage_24h']
        formatted_df['24h Change (%)'] = formatted_df['24h Change (%)'].apply(lambda x: f"{x:.2f}%")
        
        formatted_df['24h Volume (USD)'] = formatted_df['24h Volume (USD)'].apply(lambda x: f"${x:,.0f}")
        
        st.markdown('<div class="dataframe-container">', unsafe_allow_html=True)
        st.dataframe(
            formatted_df,
            column_config={
                "24h Change (%)": st.column_config.Column(
                    "24h Change (%)",
                    help="Price change in the last 24 hours",
                    width="medium",
                )
            },
            use_container_width=True,
            hide_index=True
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Market visualizations
        col1, col2 = st.columns(2)
        
        with col1:
            # Market Cap Distribution
            st.markdown("<h3 class='subheader'>Market Cap Distribution</h3>", unsafe_allow_html=True)
            fig = px.pie(
                top_cryptos.head(8), 
                values='market_cap', 
                names='name', 
                title='Top 8 Cryptocurrencies by Market Cap',
                hole=0.4,
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            fig.update_layout(
                legend=dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5),
                margin=dict(l=20, r=20, t=60, b=60)
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # 24h Price Change
            st.markdown("<h3 class='subheader'>24h Price Change</h3>", unsafe_allow_html=True)
            
            # Get top 5 gainers and losers
            gainers = top_cryptos.sort_values(by='price_change_percentage_24h', ascending=False).head(5)
            losers = top_cryptos.sort_values(by='price_change_percentage_24h', ascending=True).head(5)
            
            combined = pd.concat([gainers, losers])
            
            fig = px.bar(
                combined, 
                x='name', 
                y='price_change_percentage_24h',
                title='Top Gainers and Losers (24h)',
                labels={'name': 'Cryptocurrency', 'price_change_percentage_24h': '24h Change (%)'},
                color='price_change_percentage_24h',
                color_continuous_scale=['#F44336', '#FFFFFF', '#4CAF50'],
                range_color=[-max(abs(combined['price_change_percentage_24h'])), max(abs(combined['price_change_percentage_24h']))]
            )
            fig.update_layout(
                height=400,
                margin=dict(l=20, r=20, t=60, b=100),
                xaxis_tickangle=-45
            )
            st.plotly_chart(fig, use_container_width=True)
    
    else:
        st.warning("No data available. Please check your internet connection or try again later.")
        
        # Show demo data option
        if st.button("Load Demo Data"):
            # Create demo data for display purposes
            demo_df = create_demo_data()
            
            # Display demo data with a clear notice
            st.info("⚠️ This is demo data for display purposes only. It does not reflect real market conditions.")
            
            # Format the demo data for display
            formatted_demo = demo_df[['name', 'symbol', 'current_price', 'market_cap', 
                                   'price_change_percentage_24h', 'total_volume']].copy()
            
            formatted_demo.columns = ['Name', 'Symbol', 'Price (USD)', 'Market Cap (USD)', 
                                  '24h Change (%)', '24h Volume (USD)']
            
            # Format the values
            formatted_demo['Symbol'] = formatted_demo['Symbol'].str.upper()
            formatted_demo['Price (USD)'] = formatted_demo['Price (USD)'].apply(lambda x: f"${x:,.2f}")
            formatted_demo['Market Cap (USD)'] = formatted_demo['Market Cap (USD)'].apply(lambda x: f"${x:,.0f}")
            formatted_demo['24h Change (%)'] = formatted_demo['24h Change (%)'].apply(lambda x: f"{x:.2f}%")
            formatted_demo['24h Volume (USD)'] = formatted_demo['24h Volume (USD)'].apply(lambda x: f"${x:,.0f}")
            
            st.dataframe(formatted_demo, use_container_width=True)
